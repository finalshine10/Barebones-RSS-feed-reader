import tkinter as tk
from tkinter import ttk, messagebox
import feedparser
import json
import webbrowser

# Function to load saved RSS feeds from a file
def load_feeds():
    try:
        with open("feeds.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# Function to save RSS feeds to a file
def save_feeds(feeds):
    with open("feeds.json", "w") as file:
        json.dump(feeds, file, indent=4)

# Function to fetch and display feed entries
def fetch_feed():
    url = feed_url_entry.get()
    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid RSS feed URL.")
        return

    feed = feedparser.parse(url)
    if feed.bozo:
        messagebox.showerror("Fetch Error", "Failed to fetch RSS feed. Please check the URL.")
        return

    feed_name = feed.feed.title if feed.feed.title else "Unnamed Feed"
    feeds[feed_name] = url
    save_feeds(feeds)

    feed_selector['values'] = list(feeds.keys())  # Update dropdown menu
    feed_selector.set(feed_name)
    display_feed(feed_name, feed.entries)

# Function to display feed entries in the UI
def display_feed(feed_name, entries):
    feed_list.delete(0, tk.END)
    feed_title.set(feed_name)
    for entry in entries:
        feed_list.insert(tk.END, entry.title)
        feed_links[entry.title] = entry.link

# Function to handle feed selection from saved feeds
def on_feed_select(event):
    selected_feed = feed_selector.get()
    if selected_feed:
        feed = feedparser.parse(feeds[selected_feed])
        display_feed(selected_feed, feed.entries)

# Function to open the selected feed item in the default web browser
def open_selected_entry(event):
    selected_index = feed_list.curselection()
    if selected_index:
        selected_title = feed_list.get(selected_index)
        selected_link = feed_links.get(selected_title)
        if selected_link:
            webbrowser.open(selected_link)

# Debounced function to handle resizing
def debounce_resize(event):
    app.after(100, resize_widgets)  # Delay by 100ms

# Function to resize widgets responsively
def resize_widgets():
    window_width = app.winfo_width()
    font_size = max(8, int(window_width / 80))
    
    feed_url_label.config(font=("Arial", font_size))
    feed_url_entry.config(font=("Arial", font_size))
    fetch_button.config(font=("Arial", font_size))
    feed_selector.config(font=("Arial", font_size))
    feed_title_label.config(font=("Arial", font_size + 2, "bold"))
    feed_list.config(font=("Arial", font_size))

# Main application window
app = tk.Tk()
app.title("RSS Feed Reader")
app.geometry("800x600")

# Configure the main grid layout
app.grid_rowconfigure(1, weight=1)
app.grid_columnconfigure(0, weight=1)

# Top Frame for Feed URL entry
top_frame = ttk.Frame(app)
top_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=5)

feed_url_label = ttk.Label(top_frame, text="RSS Feed URL:")
feed_url_label.grid(row=0, column=0, padx=5, sticky="w")

feed_url_entry = ttk.Entry(top_frame)
feed_url_entry.grid(row=0, column=1, padx=5, sticky="ew")

fetch_button = ttk.Button(top_frame, text="Fetch Feed", command=fetch_feed)
fetch_button.grid(row=0, column=2, padx=5)

top_frame.grid_columnconfigure(1, weight=1)

# Middle Frame for Feed Selector and Display
middle_frame = ttk.Frame(app)
middle_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)

# Configure middle frame grid to take at least 60% of the height
middle_frame.grid_rowconfigure(0, weight=1)
middle_frame.grid_rowconfigure(1, weight=1)
middle_frame.grid_rowconfigure(2, weight=5)  # Increase weight for feed list
middle_frame.grid_columnconfigure(0, weight=1)

feed_selector = ttk.Combobox(middle_frame, state="readonly")
feed_selector.grid(row=0, column=0, sticky="ew")
feed_selector.bind("<<ComboboxSelected>>", on_feed_select)

feed_title = tk.StringVar()
feed_title_label = ttk.Label(middle_frame, textvariable=feed_title, font=("Arial", 14, "bold"))
feed_title_label.grid(row=1, column=0, pady=5, sticky="w")

feed_list = tk.Listbox(middle_frame, height=20)  # Set a larger initial height
feed_list.grid(row=2, column=0, sticky="nsew")
feed_list.bind("<Double-1>", open_selected_entry)

# Load saved feeds and populate the feed selector
feeds = load_feeds()
feed_selector['values'] = list(feeds.keys())
feed_links = {}

# Bind debounced resize event
app.bind("<Configure>", debounce_resize)

# Set minimum window size
app.minsize(600, 400)

# Run the application
app.mainloop()
