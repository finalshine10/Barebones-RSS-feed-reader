import tkinter as tk
from tkinter import ttk, messagebox
import feedparser
import json
import webbrowser
from datetime import datetime
import pytz

# Function to load saved RSS feeds from a file
def load_feeds():
    try:
        with open("feeds.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# Function to save RSS feeds to a file
def save_feeds(feeds):
    with open("feeds.json", "w") as file:
        json.dump(feeds, file, indent=4)

# Function to fetch and display feed entries
def fetch_feed():
    url = feed_url_entry.get()
    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid RSS feed URL.")
        return

    feed = feedparser.parse(url)
    if feed.bozo:
        messagebox.showerror("Fetch Error", "Failed to fetch RSS feed. Please check the URL.")
        return

    feed_name = feed.feed.title if feed.feed.title else "Unnamed Feed"
    feeds[feed_name] = url
    save_feeds(feeds)

    feed_selector['values'] = ["Show All Feeds"] + list(feeds.keys())  # Update dropdown menu
    feed_selector.set(feed_name)
    display_feed(feed_name, feed.entries)

# Function to display individual feed entries in the UI
def display_feed(feed_name, entries):
    feed_text.config(state=tk.NORMAL)  # Enable editing to insert content
    feed_text.delete(1.0, tk.END)
    feed_title.set(feed_name)
    eastern = pytz.timezone('America/Toronto')
    for entry in entries:
        if hasattr(entry, 'published_parsed'):
            published = datetime(*entry.published_parsed[:6], tzinfo=pytz.utc).astimezone(eastern)
        else:
            published = datetime.now(eastern)
        
        entry_time = published.strftime('%Y-%m-%d %H:%M')
        entry_title = entry.title
        
        # Insert time, date, and title with different styles (no feed name in individual feed view)
        feed_text.insert(tk.END, f"{entry_time} - ", "italic")
        feed_text.insert(tk.END, f"{entry_title}\n", "normal")

        # Store the link in a dictionary
        feed_links[f"{entry_time} - {entry_title}"] = entry.link
    feed_text.config(state=tk.DISABLED)  # Set to read-only after inserting content

# Function to display all feed entries from all saved feeds in chronological order
def display_all_feeds():
    feed_text.config(state=tk.NORMAL)  # Enable editing to insert content
    feed_text.delete(1.0, tk.END)
    feed_title.set("All Feeds")

    # Collect all entries
    all_entries = []
    eastern = pytz.timezone('America/Toronto')
    for feed_name, url in feeds.items():
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if hasattr(entry, 'published_parsed'):
                published = datetime(*entry.published_parsed[:6], tzinfo=pytz.utc).astimezone(eastern)
            else:
                published = datetime.now(eastern)
            all_entries.append((feed_name, entry.title, entry.link, published))
    
    # Sort all entries by published date
    all_entries.sort(key=lambda x: x[3], reverse=True)

    # Insert each entry into the Text widget with proper formatting (including feed name)
    for feed_name, title, link, published in all_entries:
        entry_time = published.strftime('%Y-%m-%d %H:%M')
        
        # Insert time, date, and title with different styles
        feed_text.insert(tk.END, f"{entry_time} - ", "italic")
        feed_text.insert(tk.END, f"{feed_name}: ", "bold")
        feed_text.insert(tk.END, f"{title}\n", "normal")

        # Store the link in a dictionary
        feed_links[f"{entry_time} - {feed_name}: {title}"] = link
    feed_text.config(state=tk.DISABLED)  # Set to read-only after inserting content

# Function to handle feed selection from saved feeds
def on_feed_select(event):
    selected_feed = feed_selector.get()
    if selected_feed == "Show All Feeds":
        display_all_feeds()
    elif selected_feed:
        feed = feedparser.parse(feeds[selected_feed])
        display_feed(selected_feed, feed.entries)

# Function to open the selected feed item in the default web browser
def open_selected_entry(event):
    cursor_index = feed_text.index(tk.CURRENT)
    line_start = f"{cursor_index.split('.')[0]}.0"
    line_end = f"{cursor_index.split('.')[0]}.end"
    selected_line = feed_text.get(line_start, line_end).strip()

    selected_link = feed_links.get(selected_line)
    if selected_link:
        webbrowser.open(selected_link)

# Debounced function to handle resizing
def debounce_resize(event):
    app.after(100, resize_widgets)  # Delay by 100ms

# Function to resize widgets responsively
def resize_widgets():
    window_width = app.winfo_width()
    font_size = max(8, int(window_width / 80))
    
    feed_url_label.config(font=("Arial", font_size))
    feed_url_entry.config(font=("Arial", font_size))
    fetch_button.config(font=("Arial", font_size))
    feed_selector.config(font=("Arial", font_size))
    feed_title_label.config(font=("Arial", font_size + 2, "bold"))

    feed_text.tag_configure("bold", font=("Arial", font_size, "bold"))
    feed_text.tag_configure("italic", font=("Arial", font_size, "italic"))
    feed_text.tag_configure("normal", font=("Arial", font_size))

# Main application window
app = tk.Tk()
app.title("RSS Feed Reader")
app.geometry("800x600")

# Configure the main grid layout
app.grid_rowconfigure(1, weight=1)
app.grid_columnconfigure(0, weight=1)

# Top Frame for Feed URL entry
top_frame = ttk.Frame(app)
top_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=5)

feed_url_label = ttk.Label(top_frame, text="RSS Feed URL:")
feed_url_label.grid(row=0, column=0, padx=5, sticky="w")

feed_url_entry = ttk.Entry(top_frame)
feed_url_entry.grid(row=0, column=1, padx=5, sticky="ew")

fetch_button = ttk.Button(top_frame, text="Fetch Feed", command=fetch_feed)
fetch_button.grid(row=0, column=2, padx=5)

top_frame.grid_columnconfigure(1, weight=1)

# Middle Frame for Feed Selector and Display
middle_frame = ttk.Frame(app)
middle_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)

# Configure middle frame grid to take at least 60% of the height
middle_frame.grid_rowconfigure(0, weight=1)
middle_frame.grid_rowconfigure(1, weight=1)
middle_frame.grid_rowconfigure(2, weight=5)  # Increase weight for feed list
middle_frame.grid_columnconfigure(0, weight=1)

feed_selector = ttk.Combobox(middle_frame, state="readonly")
feed_selector.grid(row=0, column=0, sticky="ew")
feed_selector.bind("<<ComboboxSelected>>", on_feed_select)

feed_title = tk.StringVar()
feed_title_label = ttk.Label(middle_frame, textvariable=feed_title, font=("Arial", 14, "bold"))
feed_title_label.grid(row=1, column=0, pady=5, sticky="w")

# Frame to hold the Text widget and Scrollbar
text_frame = ttk.Frame(middle_frame)
text_frame.grid(row=2, column=0, sticky="nsew")

# Scrollbar for the Text widget
scrollbar = ttk.Scrollbar(text_frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# Feed Text widget with Scrollbar linked
feed_text = tk.Text(text_frame, wrap="word", yscrollcommand=scrollbar.set, font=("Arial", 10))
feed_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
scrollbar.config(command=feed_text.yview)

feed_text.bind("<Double-1>", open_selected_entry)
feed_text.config(state=tk.DISABLED)  # Set the Text widget to read-only

# Load saved feeds and populate the feed selector
feeds = load_feeds()
feed_selector['values'] = ["Show All Feeds"] + list(feeds.keys())
feed_links = {}

# Bind debounced resize event
app.bind("<Configure>", debounce_resize)

# Set minimum window size
app.minsize(600, 400)

# Run the application
app.mainloop()
